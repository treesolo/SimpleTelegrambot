from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os
import asyncio
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = os.getenv("TOKEN") # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ú–µ–Ω—é
menu = {
    "Starters": ["Bruschetta", "Caprese Salad", "Garlic Shrimp"],
    "Pasta & Risotto": ["Carbonara", "Seafood Risotto", "Penne Arrabbiata"],
    "Pizza": ["Margherita", "Funghi e Prosciutto", "Diavola"],
    "Main Courses": ["T-Bone Steak", "Oven-Baked Sea Bass", "Chicken Cacciatore"],
    "Desserts": ["Tiramisu", "Panna Cotta", "Chocolate Lava Cake"],
    "Drinks": ["Red & White Wine", "Aperol Spritz", "Espresso"]
}

# –û–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—é
menu_description = """
üîπ 1. Starters üçΩÔ∏è

ü•ñ Bruschetta al Pomodoro ‚Äì Toasted bread with fresh tomatoes, basil & olive oil
üßÄ Caprese Salad ‚Äì Mozzarella, tomatoes & basil with balsamic glaze
üç§ Gamberi al Aglio ‚Äì Garlic butter shrimp with herbs

üîπ 2. Pasta & Risotto üçù

üçù Spaghetti Carbonara ‚Äì Traditional Roman pasta with pancetta, egg & cheese
üç§ Seafood Risotto ‚Äì Creamy risotto with shrimp, mussels & calamari
üçÜ Penne Arrabbiata ‚Äì Spicy tomato sauce with garlic & chili

üîπ 3. Pizza üçï

üçï Margherita ‚Äì Tomato sauce, mozzarella & fresh basil
üçÑ Funghi e Prosciutto ‚Äì Mushrooms, prosciutto & mozzarella
üå∂Ô∏è Diavola ‚Äì Spicy salami, tomato sauce & mozzarella

üîπ 4. Main Courses üçñ

ü•© Bistecca alla Fiorentina ‚Äì Grilled T-bone steak with rosemary
üêü Branzino al Forno ‚Äì Oven-baked sea bass with lemon & herbs
üçó Pollo alla Cacciatora ‚Äì Chicken braised with tomatoes, olives & white wine

üîπ 5. Desserts üç∞

üçÆ Tiramisu ‚Äì Coffee-soaked sponge cake with mascarpone
üç® Panna Cotta ‚Äì Italian vanilla cream pudding with berry sauce
üç´ Chocolate Lava Cake ‚Äì Warm chocolate cake with molten center

üîπ 6. Drinks üç∑

üç∑ Red & White Wine ‚Äì Selection of fine Italian wines
üçπ Aperol Spritz ‚Äì Classic Italian aperitif
‚òï Espresso ‚Äì Authentic Italian coffee
"""

# –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–∫–∞–∑–æ–≤ (—Å–ª–æ–≤–∞—Ä—å: –±–ª—é–¥–æ -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
orders = {}

# –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
delivery_time = None

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
order_id = str(uuid.uuid4())[:8]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ Menu –∏ View Order)
start_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Menu"), KeyboardButton(text="üõí View Order")]
    ],
    resize_keyboard=True
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=category)] for category in menu.keys()
    ] + [
        [KeyboardButton(text="‚¨Ö Back to Start")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üçΩ Welcome to our Italian Restaurant! What would you like to do?", reply_markup=start_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Menu
@dp.message(lambda message: message.text == "Menu")
async def show_menu(message: types.Message):
    await message.answer(menu_description, reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(lambda message: message.text in menu.keys())
async def select_category(message: types.Message):
    category = message.text
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=item)] for item in menu[category]
        ] + [
            [KeyboardButton(text="‚¨Ö Back to Menu")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"üçï Choose a dish from {category}:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
@dp.message(lambda message: any(message.text in items for items in menu.values()))
async def select_item(message: types.Message):
    dish = message.text
    if dish in orders:
        orders[dish] += 1
    else:
        orders[dish] = 1

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"‚ûï Add more {dish}")],
            [KeyboardButton(text="‚¨Ö Back to Menu")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"‚úÖ {dish} added to your order! Current quantity: {orders[dish]}", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –±–ª—é–¥–∞
@dp.message(lambda message: message.text.startswith("‚ûï Add more"))
async def add_more_dish(message: types.Message):
    dish = message.text.replace("‚ûï Add more ", "")
    if dish in orders:
        orders[dish] += 1
        await message.answer(f"‚úÖ Added one more {dish}. Current quantity: {orders[dish]}")
    else:
        await message.answer("‚ùå Dish not found in your order.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞
@dp.message(lambda message: message.text == "üõí View Order")
async def view_order(message: types.Message):
    if not orders:
        await message.answer("üõí Your order is empty.")
    else:
        order_list = "\n".join([f"{dish} x {quantity}" for dish, quantity in orders.items()])
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ Confirm Order")],
                [KeyboardButton(text="‚¨Ö Back to Start")]
            ],
            resize_keyboard=True
        )
        await message.answer(f"üõí Your order:\n{order_list}", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(lambda message: message.text == "‚úÖ Confirm Order")
async def confirm_order(message: types.Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="10 minutes"), KeyboardButton(text="20 minutes")],
            [KeyboardButton(text="30 minutes")]
        ],
        resize_keyboard=True
    )
    await message.answer("üïí Choose delivery time:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message(lambda message: message.text.endswith("minutes"))
async def select_delivery_time(message: types.Message):
    global delivery_time
    delivery_time = message.text
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ Send Order")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"üïí Delivery time set to {delivery_time}. Press '‚úÖ Send Order' to confirm.", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
@dp.message(lambda message: message.text == "‚úÖ Send Order")
async def send_order(message: types.Message):
    global order_id  # –û–±—ä—è–≤–ª—è–µ–º order_id –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if not orders:
        await message.answer("üõí Your order is empty.")
    else:
        order_list = "\n".join([f"{dish} x {quantity}" for dish, quantity in orders.items()])
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        order_message = (
            f"üì© New Order ID: {order_id}\n"
            f"üë§ Customer ID: {message.from_user.id}\n"
            f"üõí Order:\n{order_list}\n"
            f"üïí Delivery time: {delivery_time}"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=order_message)
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        orders.clear()
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        order_id = str(uuid.uuid4())[:8]
        await message.answer("‚úÖ Your order has been sent! Thank you!", reply_markup=start_menu)

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@dp.message(lambda message: message.text == "‚¨Ö Back to Start")
async def back_to_start(message: types.Message):
    await message.answer("üçΩ What would you like to do?", reply_markup=start_menu)

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@dp.message(lambda message: message.text == "‚¨Ö Back to Menu")
async def back_to_menu(message: types.Message):
    await message.answer("üçΩ Choose a category:", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())